import 'package:flutter/material.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:path_provider/path_provider.dart' as path_provider;
import 'theme/theme.dart';

// Assuming you'll have these model classes
// import 'models/task.dart';
// import 'models/category.dart';

// Global variable for SharedPreferences
late SharedPreferences prefs;

void main() async {
  try {
    // Ensure Flutter bindings are initialized
    WidgetsFlutterBinding.ensureInitialized();

    // Initialize SharedPreferences
    prefs = await SharedPreferences.getInstance();

    // Initialize Hive
    final appDocumentDirectory = 
        await path_provider.getApplicationDocumentsDirectory();
    await Hive.initFlutter(appDocumentDirectory.path);

    // Register Hive Adapters
    // Hive.registerAdapter(TaskAdapter());
    // Hive.registerAdapter(CategoryAdapter());

    // Open Hive Boxes
    await Hive.openBox('tasks');
    await Hive.openBox('categories');
    await Hive.openBox('settings');

    runApp(const MyApp());
  } catch (e) {
    print('Error initializing app: $e');
    // You might want to show some error UI here
  }
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder(
      valueListenable: Hive.box('settings').listenable(),
      builder: (context, Box settingsBox, child) {
        bool isDarkMode = settingsBox.get('darkMode', defaultValue: false);
        
        return MaterialApp(
          title: 'TaskMana',
          debugShowCheckedModeBanner: false,
          theme: AppTheme.lightTheme,
          darkTheme: AppTheme.darkTheme,
          themeMode: isDarkMode ? ThemeMode.dark : ThemeMode.light,
          home: const SplashScreen(),
        );
      },
    );
  }
}

class MainScreen extends StatefulWidget {
  const MainScreen({Key? key}) : super(key: key);

  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  // Box to store tasks
  late final Box taskBox;
  // Box to store categories
  late final Box categoryBox;
  // Box to store settings
  late final Box settingsBox;

  @override
  void initState() {
    super.initState();
    taskBox = Hive.box('tasks');
    categoryBox = Hive.box('categories');
    settingsBox = Hive.box('settings');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('TaskMana'),
        actions: [
          IconButton(
            icon: const Icon(Icons.brightness_6),
            onPressed: () {
              bool currentMode = settingsBox.get('darkMode', defaultValue: false);
              settingsBox.put('darkMode', !currentMode);
            },
          ),
        ],
      ),
      body: ValueListenableBuilder(
        valueListenable: taskBox.listenable(),
        builder: (context, Box box, widget) {
          if (box.isEmpty) {
            return const Center(
              child: Text('No tasks yet! Add some tasks to get started.'),
            );
          }
          // Your task list implementation here
          return const Center(
            child: Text('Your tasks will appear here'),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Add task implementation
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}

// Example Hive service for tasks
class HiveService {
  static Box get taskBox => Hive.box('tasks');
  static Box get categoryBox => Hive.box('categories');
  static Box get settingsBox => Hive.box('settings');

  // Task operations
  static Future<void> addTask(Map<String, dynamic> task) async {
    await taskBox.add(task);
  }

  static Future<void> updateTask(int index, Map<String, dynamic> task) async {
    await taskBox.putAt(index, task);
  }

  static Future<void> deleteTask(int index) async {
    await taskBox.deleteAt(index);
  }

  // Settings operations
  static Future<void> toggleDarkMode() async {
    final bool currentMode = settingsBox.get('darkMode', defaultValue: false);
    await settingsBox.put('darkMode', !currentMode);
  }

  static Future<void> setSetting(String key, dynamic value) async {
    await settingsBox.put(key, value);
  }

  static dynamic getSetting(String key, {dynamic defaultValue}) {
    return settingsBox.get(key, defaultValue: defaultValue);
  }

  // Cleanup method
  static Future<void> clearAllData() async {
    await taskBox.clear();
    await categoryBox.clear();
    // Don't clear settings box as it contains user preferences
  }
}

// You'll need these dependencies in pubspec.yaml:
/*
dependencies:
  flutter:
    sdk: flutter
  hive: ^2.2.3
  hive_flutter: ^1.1.0
  shared_preferences: ^2.2.2
  path_provider: ^2.1.1

dev_dependencies:
  hive_generator: ^2.0.1
  build_runner: ^2.4.6
*/